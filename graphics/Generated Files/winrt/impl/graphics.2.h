// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once
#include "winrt/impl/Windows.UI.Xaml.Controls.1.h"
#include "winrt/impl/Windows.UI.Xaml.Data.1.h"
#include "winrt/impl/graphics.1.h"

WINRT_EXPORT namespace winrt::graphics {

struct compilation_result
{
    graphics::compilation_status status;
    hstring error_message;
};

inline bool operator==(compilation_result const& left, compilation_result const& right) noexcept
{
    return left.status == right.status && left.error_message == right.error_message;
}

inline bool operator!=(compilation_result const& left, compilation_result const& right) noexcept
{
    return !(left == right);
}

struct view
{
    uint64_t buffer_location;
    uint32_t size_in_bytes;
    uint32_t stride_in_bytes;
};

inline bool operator==(view const& left, view const& right) noexcept
{
    return left.buffer_location == right.buffer_location && left.size_in_bytes == right.size_in_bytes && left.stride_in_bytes == right.stride_in_bytes;
}

inline bool operator!=(view const& left, view const& right) noexcept
{
    return !(left == right);
}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::graphics {

struct WINRT_EBO buffer :
    graphics::Ibuffer
{
    buffer(std::nullptr_t) noexcept {}
    buffer();
    buffer(graphics::buffer_type const& type, Windows::Foundation::Collections::IObservableVector<graphics::vertex> const& initial_data, int32_t max_size, int32_t resize_increment, bool is_auto_resize);
};

struct WINRT_EBO renderer :
    graphics::Irenderer
{
    renderer(std::nullptr_t) noexcept {}
    renderer();
};

struct WINRT_EBO shader :
    graphics::Ishader,
    impl::require<shader, Windows::UI::Xaml::Data::INotifyPropertyChanged>
{
    shader(std::nullptr_t) noexcept {}
    shader(param::hstring const& name, graphics::shader_type const& type);
};

struct WINRT_EBO vertex :
    graphics::Ivertex,
    impl::require<vertex, Windows::UI::Xaml::Data::INotifyPropertyChanged>
{
    vertex(std::nullptr_t) noexcept {}
    vertex();
    vertex(float x, float y, float z, float r, float g, float b, float a, float u, float v);
};

}
