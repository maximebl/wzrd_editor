// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::wzrd_editor {

struct IMainPage;
struct MainPage;

}

namespace winrt::impl {

template <> struct category<wzrd_editor::IMainPage>{ using type = interface_category; };
template <> struct category<wzrd_editor::MainPage>{ using type = class_category; };
template <> struct name<wzrd_editor::IMainPage>{ static constexpr auto & value{ L"wzrd_editor.IMainPage" }; };
template <> struct name<wzrd_editor::MainPage>{ static constexpr auto & value{ L"wzrd_editor.MainPage" }; };
template <> struct guid<wzrd_editor::IMainPage>{ static constexpr GUID value{ 0x398906C0,0xAE1E,0x5883,{ 0xB2,0x21,0xB1,0xB0,0x9A,0x31,0x5F,0x61 } }; };
template <> struct default_interface<wzrd_editor::MainPage>{ using type = wzrd_editor::IMainPage; };

template <typename D>
struct consume_wzrd_editor_IMainPage
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<wzrd_editor::IMainPage> { template <typename D> using type = consume_wzrd_editor_IMainPage<D>; };

template <> struct abi<wzrd_editor::IMainPage>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MyProperty(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MyProperty(int32_t value) noexcept = 0;
};};

}
